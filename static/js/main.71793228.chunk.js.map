{"version":3,"sources":["util/formattedDate.ts","dnd/DefaultItems.ts","components/modal/Modal.tsx","components/modal/AddItemModal.tsx","App.tsx","index.tsx"],"names":["currentDatetime","Date","formattedDate","getDate","getMonth","getFullYear","DefaultItems","id","uuid","title","description","date","Modal","props","item","columns","columnId","setColumn","setOpen","React","mode","setMode","updatedItem","setUpdatedItem","anchorEl","setAnchorEl","length","foundItems","foundColumn","Object","entries","find","colItem","items","openMenu","Boolean","open","onClose","Box","className","onClick","event","currentTarget","columnType","TextField","variant","value","onChange","e","target","placeholder","label","sx","marginTop","marginBottom","width","multiline","minRows","maxRows","updatedItemArray","newItems","map","i","console","log","name","Button","marginRight","Menu","TransitionComponent","Fade","MenuItem","onMouseUp","filter","deleteTodo","fontSize","AddItemModal","useState","newItem","setNewItem","Fragment","push","App","setColumnId","setColumnType","openDetail","setOpenDetail","openAddItem","setOpenAddItem","setItem","handleClick","Container","color","Grid","container","spacing","onDragEnd","result","setColumns","destination","source","droppableId","sourceColumn","destColumn","sourceItems","destItems","splice","index","removed","column","copiedItems","provided","snapshot","xs","md","droppableProps","ref","innerRef","style","position","top","right","cursor","background","border","draggableId","Paper","draggableProps","dragHandleProps","openModalHandler","backgroundColor","isDragging","fontFamily","ReactDOM","render","document","getElementById"],"mappings":"4QACIA,EAAkB,IAAIC,KACbC,EAAgBF,EAAgBG,UAAY,IAFhC,CAAC,UAAW,WAAY,QAAQ,QAAS,MAAO,OAAQ,OAAQ,WAAY,YAAa,UAAW,WAAY,YAEnEH,EAAgBI,YAAc,IAAMJ,EAAgBK,cCG7GC,EAAoC,CAC7C,CACEC,GAAIC,cACJC,MAAO,gBACPC,YAAa,uGACbC,KAAMT,GAER,CACEK,GAAIC,cACJC,MAAO,yBACPC,YAAa,+EACbC,KAAMT,GAER,CACEK,GAAIC,cACJC,MAAO,qBACPC,YAAa,6FACbC,KAAMT,I,wIC+KGU,EAvLqB,SAACC,GACjC,IAAQC,EAAgDD,EAAhDC,KAAMC,EAA0CF,EAA1CE,QAASC,EAAiCH,EAAjCG,SAAUC,EAAuBJ,EAAvBI,UAAWC,EAAYL,EAAZK,QAE5C,EAA0BC,WAAuB,QAAjD,mBAAQC,EAAR,KAAcC,EAAd,KAEA,EAAwCF,WAAkC,CACtEZ,GAAI,IACJE,MAAO,IACPC,YAAa,IACbC,KAAMT,IAJV,mBAAQoB,EAAR,KAAqBC,EAArB,KAOA,EAAgCJ,WAAmC,MAAnE,mBAAOK,EAAP,KAAiBC,EAAjB,KAEAN,aAAgB,WACW,IAAnBL,EAAKP,GAAGmB,QACRH,EAAeT,KAEpB,CAACA,IAGJ,IAYIa,EANEC,EAHAC,OAAOC,QAAQf,GAMGgB,MAAK,SAAAC,GAAO,OAAIA,EAAQ,KAAOhB,KAInDY,IACAD,EAAaC,EAAY,GAAGK,OAGhC,IAAMC,EAAWC,QAAQX,GA0DzB,OACI,eAAC,WAAD,WACA,cAAC,IAAD,CACIY,KAAMvB,EAAMuB,KACZC,QAASxB,EAAMwB,QAFnB,SAII,eAACC,EAAA,EAAD,CAAKC,UAAU,MAAf,UACI,wBAAQA,UAAU,gBAAgBC,QA/D1B,SAACC,GACnBhB,EAAYgB,EAAMC,gBA8DR,SACI,cAAC,IAAD,MAEJ,oBAAIH,UAAU,YAAd,SAA2B1B,EAAM8B,aAEpB,SAATvB,EACA,eAAC,WAAD,WACI,oBAAImB,UAAU,aAAd,SAA4BzB,EAAKL,QACjC,mBAAG8B,UAAU,mBAAb,SAAiCzB,EAAKJ,iBAG1C,eAAC,WAAD,WACI,cAACkC,EAAA,EAAD,CACIC,QAAQ,WACRC,MAAOxB,EAAYb,MACnBsC,SAAU,SAACC,GAAD,OAAOzB,EAAe,2BAAID,GAAL,IAAkBb,MAAOuC,EAAEC,OAAOH,UACjEI,YAAY,kBACZC,MAAM,QACNC,GAAI,CACAC,UAAW,OACXC,aAAc,OACdC,MAAO,UAGf,cAACX,EAAA,EAAD,CACIC,QAAQ,WACRW,WAAS,EACTC,QAAS,EACTC,QAAS,GACTZ,MAAOxB,EAAYZ,YACnBqC,SAAU,SAACC,GAAD,OAAOzB,EAAe,2BAAID,GAAL,IAAkBZ,YAAasC,EAAEC,OAAOH,UACvEK,MAAM,cACND,YAAY,wBACZE,GAAI,CACAG,MAAO,aAQV,SAATnC,GACA,sBAAKmB,UAAU,iBAAiBC,QAvE/B,WACb,GAAIZ,EAAa,CACb,IAAM+B,EAAmB,CAAC,eAAIrC,IAExBsC,EAAWjC,EAAWkC,KAAI,SAAA/C,GAAI,OAAI6C,EAAiB5B,MAAK,SAAA+B,GAAC,OAAIA,EAAEvD,KAAOO,EAAKP,OAAOO,KACxFiD,QAAQC,IAAIJ,GAGZ3C,EAAU,2BACHF,GADE,kBAEJC,EAAW,CACRiD,KAAMrC,EAAY,GAAGqC,KACrBhC,MAAO2B,MAInB1C,GAAQ,GACRO,EAAY,MACZJ,EAAQ,SAqDI,UACI,cAAC6C,EAAA,EAAD,CAAQrB,QAAQ,OAAOO,GAAI,CAACe,YAAa,OAAQ3B,QAAS3B,EAAMwB,QAAhE,oBACA,cAAC6B,EAAA,EAAD,CAAQrB,QAAQ,YAAhB,4BAKZ,eAACuB,EAAA,EAAD,CACI5C,SAAUA,EACVY,KAAMF,EACNG,QAhHQ,WAClBZ,EAAY,OAgHF4C,oBAAqBC,IACrB/B,UAAU,OALd,UAQiB,SAATnB,EACA,eAACmD,EAAA,EAAD,CAAUhC,UAAU,iBAAiBC,QAlH/B,WAClBnB,EAAQ,QACRI,EAAY,OAgHA,UACI,cAAC,IAAD,IACA,wCAGJ,eAAC8C,EAAA,EAAD,CAAUhC,UAAU,iBAAiBC,QAlHjC,WAChBnB,EAAQ,QACRI,EAAY,OAgHA,UACI,cAAC,IAAD,IACA,wCAIR,eAAC8C,EAAA,EAAD,CAAUhC,UAAU,iBAAiBiC,UAAW,kBAnHzC,SAACjE,GAChB,IAAIqD,EAAgC,GAEhChC,IACAgC,EAAWjC,EAAW8C,QAAO,SAAA3D,GAAI,OAAIA,EAAKP,KAAOA,KACjDU,EAAU,2BACHF,GADE,kBAEHC,EAAW,CACTiD,KAAMrC,EAAY,GAAGqC,KACrBhC,MAAO2B,OAInB1C,GAAQ,GACRO,EAAY,MAqGkDiD,CAAW5D,EAAKP,KAAtE,UACI,cAAC,IAAD,CAAYoE,SAAS,UACrB,iDCtGLC,EA9E+B,SAAC/D,GAC3C,IAqBIc,EArBKZ,EAA+BF,EAA/BE,QAASC,EAAsBH,EAAtBG,SAAUE,EAAYL,EAAZK,QAE5B,EAAgC2D,mBAA4B,CACxDtE,GAAIC,cACJC,MAAO,GACPC,YAAY,GACZC,KAAMT,IAJV,mBAAQ4E,EAAR,KAAiBC,EAAjB,KAaMnD,EAHAC,OAAOC,QAAQf,GAMGgB,MAAK,SAAAC,GAAO,OAAIA,EAAQ,KAAOhB,KAInDY,IACAD,EAAaC,EAAY,GAAGK,OAQhC,OACI,cAAC,IAAM+C,SAAP,UACA,cAAC,IAAD,CACI5C,KAAMvB,EAAMuB,KACZC,QAASxB,EAAMwB,QAFnB,SAII,eAACC,EAAA,EAAD,CAAKC,UAAU,MAAf,UACI,oBAAIA,UAAU,YAAd,uBAEI,eAAC,IAAMyC,SAAP,WACI,cAACpC,EAAA,EAAD,CACIC,QAAQ,WACRC,MAAOgC,EAAQrE,MACfsC,SAAU,SAACC,GAAD,OAAO+B,EAAW,2BAAID,GAAL,IAAcrE,MAAOuC,EAAEC,OAAOH,UACzDI,YAAY,kBACZC,MAAM,QACNC,GAAI,CACAC,UAAW,OACXC,aAAc,OACdC,MAAO,UAGf,cAACX,EAAA,EAAD,CACIC,QAAQ,WACRW,WAAS,EACTC,QAAS,EACTC,QAAS,GACTZ,MAAOgC,EAAQpE,YACfqC,SAAU,SAACC,GAAD,OAAO+B,EAAW,2BAAID,GAAL,IAAcpE,YAAasC,EAAEC,OAAOH,UAC/DK,MAAM,cACND,YAAY,wBACZE,GAAI,CACAG,MAAO,aAInB,sBAAKhB,UAAU,iBAAf,UACI,cAAC2B,EAAA,EAAD,CAAQrB,QAAQ,OAAOO,GAAI,CAACe,YAAa,OAAQ3B,QAAS3B,EAAMwB,QAAhE,oBACA,cAAC6B,EAAA,EAAD,CAAQrB,QAAQ,YAAYL,QA3C3B,WACjBb,EAAWsD,KAAKH,GAChB5D,GAAQ,IAyCQ,6B,kCC0JTgE,G,OAnLO,WAAO,IAAD,EAE1B,EAAkC/D,WAAuB,KAAzD,mBAAQH,EAAR,KAAkBmE,EAAlB,KAEA,EAA+BhE,YAAA,mBAC5BX,cAAS,CACNyD,KAAM,QACNhC,MAAO3B,IAHkB,cAK1BE,cAAS,CACRyD,KAAM,QACNhC,MAAO,KAPkB,cAS1BzB,cAAS,CACRyD,KAAM,WACNhC,MAAO,KAXkB,IAA/B,mBAAQlB,EAAR,KAAiBE,EAAjB,KAeA,EAAsCE,WAAuB,IAA7D,mBAAQwB,EAAR,KAAoByC,EAApB,KACA,EAAsCjE,YAAwB,GAA9D,mBAAQkE,EAAR,KAAoBC,EAApB,KACA,EAAwCnE,YAAwB,GAAhE,mBAAQoE,EAAR,KAAqBC,EAArB,KAEA,EAA0BrE,WAAkC,CAC1DZ,GAAI,GACJE,MAAO,GACPC,YAAa,GACbC,KAAM,KAJR,mBAAQG,EAAR,KAAc2E,EAAd,KAOA,EAAgCtE,WAAmC,MAAnE,mBAAOK,EAAP,KAAiBC,EAAjB,KAGMS,EAAWC,QAAQX,GAEnBkE,EAAc,SAACjD,GACnBhB,EAAYgB,EAAMC,gBA4BpB,OACE,eAAC,WAAD,WACE,eAACiD,EAAA,EAAD,WACE,sBAAKpD,UAAU,SAAf,UACE,cAAC,IAAD,CAAsBoC,SAAS,QAAQvB,GAAI,CAACe,YAAa,QAASyB,MAAO,WACzE,4CAEF,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGxD,UAAU,YAAtC,SACA,eAAC,IAAD,CAAkByD,UAAW,SAAAC,GAAM,OA9GzB,SAACA,EAAalF,EAAcmF,GAC5C,GAAKD,EAAOE,YAAZ,CACA,IAAQC,EAAwBH,EAAxBG,OAAQD,EAAgBF,EAAhBE,YAEhB,GAAIC,EAAOC,cAAgBF,EAAYE,YAAa,CAAC,IAAD,EAC5CC,EAAevF,EAAQqF,EAAOC,aAC9BE,EAAaxF,EAAQoF,EAAYE,aACjCG,EAAW,YAAOF,EAAarE,OAC/BwE,EAAS,YAAOF,EAAWtE,OACjC,EAAkBuE,EAAYE,OAAON,EAAOO,MAAO,GAA5CC,EAAP,oBACAH,EAAUC,OAAOP,EAAYQ,MAAO,EAAGC,GACvCV,EAAW,2BACNnF,GADK,uBAEPqF,EAAOC,YAFA,YAAC,eAGJC,GAHG,IAINrE,MAAOuE,KAJD,cAMPL,EAAYE,YANL,YAAC,eAOJE,GAPG,IAQNtE,MAAOwE,KARD,SAWL,CACL,IAAMI,EAAS9F,EAAQqF,EAAOC,aACxBS,EAAW,YAAOD,EAAO5E,OAC/B,EAAkB6E,EAAYJ,OAAON,EAAOO,MAAO,GAA5CC,EAAP,oBACAE,EAAYJ,OAAOP,EAAYQ,MAAO,EAAGC,GACzCV,EAAW,2BACNnF,GADK,kBAEPqF,EAAOC,YAFA,YAAC,eAGJQ,GAHG,IAIN5E,MAAO6E,SA+EgCd,CAAUC,EAAQlF,EAASE,IAAlE,UAEIY,OAAOC,QAAQf,GAAS8C,KAAI,YAAmB,IAAD,mBAAhBtD,EAAgB,KAAZsG,EAAY,KAC5C,OACE,cAAC,IAAD,CAAoBR,YAAa9F,EAAjC,SACK,SAACwG,EAAUC,GACV,OACE,cAACnB,EAAA,EAAD,CAAM/E,MAAI,EAACmG,GAAI,GAAIC,GAAI,EAAG3E,UAAU,sBAApC,SACE,gDACMwE,EAASI,gBADf,IAEEC,IAAKL,EAASM,SACd9E,UAAU,2CAHZ,UAKE,6BAAKsE,EAAO5C,OAEM,UAAhB4C,EAAO5C,MACP,wBAAQzB,QAASkD,EAAa4B,MAAO,CACjCC,SAAU,WACVC,IAAK,OACLC,MAAO,OACPC,OAAQ,UACRC,WAAY,cACZC,OAAQ,QANZ,SAQE,cAAC,IAAD,MAIFf,EAAO5E,MAAM4B,KAAI,SAAC/C,EAAM6F,GACtB,OACE,cAAC,IAAD,CAEEkB,YAAa/G,EAAKP,GAClBoG,MAAOA,EAHT,SAKK,SAACI,EAAUC,GACV,OACE,eAACc,EAAA,EAAD,qCACEV,IAAKL,EAASM,UACVN,EAASgB,gBACThB,EAASiB,iBAHf,IAIExF,QAAS,kBAtE1B,SAAC1B,EAAyBmD,EAAc1D,GAC/D6E,EAAcnB,GACdkB,EAAY5E,GACZkF,EAAQ3E,GACRwE,GAAc,GAkEyC2C,CAAiBnH,EAAM+F,EAAO5C,KAAM1D,IACnD6C,GAAI,CACF8E,gBAAiBlB,EAASmB,WAAa,UAAY,SAErD5F,UAAU,kDARZ,UAUE,6BAAKzB,EAAKL,QACV,4BAAIK,EAAKH,aAjBZG,EAAKP,eA3BdA,MA4DlB,cAAC6D,EAAA,EAAD,CACE5C,SAAUA,EACVY,KAAMF,EACNG,QApGM,WAClBZ,EAAY,OAoGA4C,oBAAqBC,IACrB/B,UAAU,OALZ,SAOE,eAACgC,EAAA,EAAD,CAAU/B,QAAS,kBAvF/BgD,GAAe,QACf/D,EAAY,OAsFA,UACE,cAAC,IAAD,IACA,mBAAG6F,MAAO,CAACc,WAAY,eAAvB,mCAQZ7C,EACA,cAAC,EAAD,CACE5C,WAAYA,EACZP,KAAMmD,EACNlD,QAjGgB,WACpBmD,GAAe,IAiGXzE,QAASA,EACTC,SAAUA,EACVC,UAAWA,EACXC,QAASsE,IAGX,cAAC,EAAD,CACE7C,WAAYA,EACZ7B,KAAMA,EACNsB,KAAMiD,EACNhD,QArHoB,WACxBiD,GAAc,IAqHVvE,QAASA,EACTC,SAAUA,EACVC,UAAWA,EACXC,QAASoE,SC/NjB+C,IAASC,OACP,cAAC,EAAD,IACFC,SAASC,eAAe,U","file":"static/js/main.71793228.chunk.js","sourcesContent":["const months: string[] = [\"January\", \"February\", \"March\",\"April\", \"May\", \"Juny\", \"July\", \"Augustus\", \"September\", \"October\", \"November\", \"December\"];\r\nlet currentDatetime = new Date()\r\nexport const formattedDate = currentDatetime.getDate() + \"-\" + months[currentDatetime.getMonth()] + \"-\" + currentDatetime.getFullYear()\r\n","import { v4 as uuid } from 'uuid';\r\nimport { DefaultItemsModel } from '../model/Model'\r\n\r\nimport { formattedDate } from '../util/formattedDate';\r\n\r\nexport const DefaultItems: DefaultItemsModel[] = [\r\n    {\r\n      id: uuid(),\r\n      title: 'Clean my room',\r\n      description: 'I think it is time to clean up my room after my friends were having sleepover in my house last night',\r\n      date: formattedDate\r\n    },\r\n    {\r\n      id: uuid(),\r\n      title: 'Make dinner for family',\r\n      description: 'Mom asked me to make dinner because she and dad are going to come home late.',\r\n      date: formattedDate\r\n    },\r\n    {\r\n      id: uuid(),\r\n      title: 'Do your homeworks!',\r\n      description: 'I should finish all piled up homework from last week. Otherwise, teachers gonna be so mad.',\r\n      date: formattedDate\r\n    }\r\n  ]\r\n","import * as React from 'react';\r\nimport { Modal as MuiModal, Box, Menu, MenuItem, Fade, TextField, Button } from \"@mui/material\";\r\nimport { ModalProps } from '../../model/Model';\r\n\r\nimport { DefaultItemsModel } from '../../model/Model';\r\nimport { formattedDate } from '../../util/formattedDate';\r\n\r\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\nimport './ModalStyles.scss'\r\n\r\nconst Modal: React.FC<ModalProps> = (props) => {\r\n    const { item, columns, columnId, setColumn, setOpen } = props\r\n\r\n    const [ mode, setMode ] = React.useState<string>('view');\r\n\r\n    const [ updatedItem, setUpdatedItem ] = React.useState<DefaultItemsModel>({\r\n        id: ' ',\r\n        title: ' ',\r\n        description: ' ',\r\n        date: formattedDate\r\n    });\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n    React.useEffect(() => {\r\n        if (item.id.length !== 0) {\r\n            setUpdatedItem(item)\r\n        }\r\n    }, [item]);\r\n\r\n\r\n    const column: [string, {\r\n        name: string;\r\n        items: DefaultItemsModel[];\r\n    }][]= Object.entries(columns);\r\n\r\n    //Found Column\r\n    const foundColumn: [string, {\r\n        name: string;\r\n        items: DefaultItemsModel[];\r\n    }] | undefined = column.find(colItem => colItem[0] === columnId);\r\n\r\n    //Found Items\r\n    let foundItems: DefaultItemsModel[];\r\n    if (foundColumn){\r\n        foundItems = foundColumn[1].items;\r\n    }\r\n\r\n    const openMenu = Boolean(anchorEl);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n      setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = (): void => {\r\n      setAnchorEl(null);\r\n    }; \r\n\r\n    const updateHandler = (): void => {\r\n        setMode('edit')\r\n        setAnchorEl(null)\r\n    }\r\n  \r\n    const viewHandler = (): void => {\r\n        setMode('view')\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    const deleteTodo = (id : string): any => {\r\n        let newItems: DefaultItemsModel[] = [];\r\n\r\n        if (foundColumn) {\r\n            newItems = foundItems.filter(item => item.id !== id)\r\n            setColumn({\r\n                ...columns,\r\n                 [columnId]: {\r\n                    name: foundColumn[1].name,\r\n                    items: newItems\r\n                 }   \r\n            })\r\n        }\r\n        setOpen(false)\r\n        setAnchorEl(null)\r\n     }\r\n\r\n    const onUpdate = (): any => {\r\n        if (foundColumn) {\r\n            const updatedItemArray = [{...updatedItem}]\r\n            \r\n            const newItems = foundItems.map(item => updatedItemArray.find(i => i.id === item.id) || item)\r\n            console.log(newItems)\r\n\r\n\r\n            setColumn({\r\n                ...columns,\r\n                [columnId]: {\r\n                    name: foundColumn[1].name,\r\n                    items: newItems\r\n                }\r\n            })\r\n        }\r\n        setOpen(false)\r\n        setAnchorEl(null)\r\n        setMode('view')\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n        <MuiModal   \r\n            open={props.open}\r\n            onClose={props.onClose}\r\n        >\r\n            <Box className='box'>\r\n                <button className='box__moreIcon' onClick={handleClick}>\r\n                    <MoreHorizIcon />\r\n                </button>\r\n                <h2 className='box__type'>{props.columnType}</h2>\r\n                {\r\n                    mode === 'view' ?\r\n                    <React.Fragment>\r\n                        <h1 className='box__title'>{item.title}</h1>\r\n                        <p className='box__description'>{item.description}</p>\r\n                    </React.Fragment>\r\n                    :\r\n                    <React.Fragment>\r\n                        <TextField \r\n                            variant='standard'\r\n                            value={updatedItem.title}\r\n                            onChange={(e) => setUpdatedItem({...updatedItem, title: e.target.value})}\r\n                            placeholder='Enter the title'\r\n                            label='Title'\r\n                            sx={{\r\n                                marginTop: '1rem',\r\n                                marginBottom: '2rem',\r\n                                width: '150%'\r\n                            }}\r\n                        />\r\n                        <TextField \r\n                            variant='standard'\r\n                            multiline\r\n                            minRows={4}\r\n                            maxRows={10}\r\n                            value={updatedItem.description}\r\n                            onChange={(e) => setUpdatedItem({...updatedItem, description: e.target.value})}\r\n                            label='Description'\r\n                            placeholder='Enter the description'\r\n                            sx={{\r\n                                width: '175%'\r\n                            }}\r\n                        />\r\n                    </React.Fragment>\r\n\r\n                }\r\n\r\n                {\r\n                    mode === 'edit' &&\r\n                    <div className='box__btn-group' onClick={onUpdate}>\r\n                        <Button variant='text' sx={{marginRight: '5px'}} onClick={props.onClose}>Cancel</Button>\r\n                        <Button variant='contained'>Update</Button>\r\n                    </div>\r\n                }\r\n            </Box>\r\n        </MuiModal>\r\n            <Menu\r\n                anchorEl={anchorEl}\r\n                open={openMenu}\r\n                onClose={handleClose}\r\n                TransitionComponent={Fade}\r\n                className='menu'\r\n            >\r\n                {\r\n                    mode === 'view' ?\r\n                    <MenuItem className='menu__menuItem' onClick={updateHandler}>\r\n                        <EditIcon />\r\n                        <p>Edit</p>\r\n                    </MenuItem>\r\n                    :\r\n                    <MenuItem className='menu__menuItem' onClick={viewHandler}>\r\n                        <VisibilityIcon />\r\n                        <p>View</p>\r\n                    </MenuItem>     \r\n                }\r\n                \r\n                <MenuItem className='menu__menuItem' onMouseUp={() => deleteTodo(item.id)}>\r\n                    <DeleteIcon fontSize='small'/>\r\n                    <p>Delete</p>\r\n                </MenuItem>\r\n\r\n            </Menu>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React, { useState } from 'react';\r\nimport { Modal as MuiModal, Box,TextField, Button } from '@mui/material';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { AddModalProps, DefaultItemsModel } from '../../model/Model';\r\nimport { formattedDate } from '../../util/formattedDate';\r\n\r\nimport './ModalStyles.scss'\r\n\r\nconst AddItemModal: React.FC<AddModalProps> = (props) => {\r\n    const {  columns, columnId, setOpen } = props\r\n\r\n    const [ newItem, setNewItem ] = useState<DefaultItemsModel>({\r\n        id: uuid(),\r\n        title: '',\r\n        description:'',\r\n        date: formattedDate\r\n    })\r\n\r\n    const column: [string, {\r\n        name: string;\r\n        items: DefaultItemsModel[];\r\n    }][]= Object.entries(columns);\r\n\r\n    //Found Column\r\n    const foundColumn: [string, {\r\n        name: string;\r\n        items: DefaultItemsModel[];\r\n    }] | undefined = column.find(colItem => colItem[0] === columnId);\r\n\r\n    //Found Items\r\n    let foundItems: DefaultItemsModel[];\r\n    if (foundColumn){\r\n        foundItems = foundColumn[1].items;\r\n    }\r\n\r\n    const handleSubmit = ():void => {\r\n        foundItems.push(newItem)\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n        <MuiModal  \r\n            open={props.open}\r\n            onClose={props.onClose}\r\n        >\r\n            <Box className='box'>\r\n                <h2 className='box__type'>Add To Do</h2>\r\n\r\n                    <React.Fragment>\r\n                        <TextField \r\n                            variant='standard'\r\n                            value={newItem.title}\r\n                            onChange={(e) => setNewItem({...newItem, title: e.target.value})}\r\n                            placeholder='Enter the title'\r\n                            label='Title'\r\n                            sx={{\r\n                                marginTop: '1rem',\r\n                                marginBottom: '2rem',\r\n                                width: '150%'\r\n                            }}\r\n                        />\r\n                        <TextField \r\n                            variant='standard'\r\n                            multiline\r\n                            minRows={4}\r\n                            maxRows={10}\r\n                            value={newItem.description}\r\n                            onChange={(e) => setNewItem({...newItem, description: e.target.value})}\r\n                            label='Description'\r\n                            placeholder='Enter the description'\r\n                            sx={{\r\n                                width: '175%'\r\n                            }}\r\n                        />\r\n                    </React.Fragment>\r\n                    <div className='box__btn-group'>\r\n                        <Button variant='text' sx={{marginRight: '5px'}} onClick={props.onClose}>Cancel</Button>\r\n                        <Button variant='contained' onClick={handleSubmit}>Save</Button>\r\n                    </div>\r\n            </Box>\r\n        </MuiModal>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default AddItemModal;","import * as React from 'react';\r\nimport { Container, Grid, Paper, Menu, MenuItem, Fade } from '@mui/material';\r\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { DefaultItems } from './dnd/DefaultItems'\r\nimport { ColumnModel, DefaultItemsModel } from './model/Model';\r\n\r\nimport PlaylistAddCheckIcon from '@mui/icons-material/PlaylistAddCheck';\r\nimport Modal from './components/modal/Modal';\r\nimport AddItemModal from './components/modal/AddItemModal';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport AddIcon from '@mui/icons-material/Add';  \r\n\r\nimport \"./App.scss\"\r\n\r\nconst onDragEnd = (result: any, columns: any, setColumns: any) => {\r\n  if (!result.destination) return;\r\n  const { source, destination } = result;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumn = columns[source.droppableId];\r\n    const destColumn = columns[destination.droppableId];\r\n    const sourceItems = [...sourceColumn.items];\r\n    const destItems = [...destColumn.items];\r\n    const [removed] = sourceItems.splice(source.index, 1);\r\n    destItems.splice(destination.index, 0, removed);\r\n    setColumns({\r\n      ...columns,\r\n      [source.droppableId]: {\r\n        ...sourceColumn,\r\n        items: sourceItems\r\n      },\r\n      [destination.droppableId]: {\r\n        ...destColumn,\r\n        items: destItems\r\n      }\r\n    });\r\n  } else {\r\n    const column = columns[source.droppableId];\r\n    const copiedItems = [...column.items];\r\n    const [removed] = copiedItems.splice(source.index, 1);\r\n    copiedItems.splice(destination.index, 0, removed);\r\n    setColumns({\r\n      ...columns,\r\n      [source.droppableId]: {\r\n        ...column,\r\n        items: copiedItems\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n\r\nconst App: React.FC = () => { \r\n\r\n  const [ columnId, setColumnId ] = React.useState<string>(' ')\r\n\r\n  const [ columns, setColumn ] = React.useState<ColumnModel>({\r\n    [uuid()]: {\r\n        name: \"To do\",\r\n        items: DefaultItems\r\n      },\r\n      [uuid()]: {\r\n        name: \"Doing\",\r\n        items: []\r\n      },\r\n      [uuid()]: {\r\n        name: \"Finished\",\r\n        items: []\r\n      }\r\n});\r\n\r\n  const [ columnType, setColumnType ] = React.useState<string>('')\r\n  const [ openDetail, setOpenDetail ] = React.useState<boolean>(false);\r\n  const [ openAddItem, setOpenAddItem ] = React.useState<boolean>(false);\r\n\r\n  const [ item, setItem ] = React.useState<DefaultItemsModel>({\r\n    id: '',\r\n    title: '',\r\n    description: '',\r\n    date: ''\r\n  })\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n\r\n  const openMenu = Boolean(anchorEl);\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = (): void => {\r\n    setAnchorEl(null);\r\n  }; \r\n\r\n  const openModalHandler = (item: DefaultItemsModel, name: string, id:string):void => {\r\n    setColumnType(name)\r\n    setColumnId(id)\r\n    setItem(item)\r\n    setOpenDetail(true)\r\n\r\n  }\r\n\r\n  const closeModalHandler = ():void => {\r\n    setOpenDetail(false)\r\n  }\r\n\r\n  const openAddModal = (): void => {\r\n    setOpenAddItem(true)\r\n    setAnchorEl(null)\r\n  }\r\n\r\n  const closeAddModal = (): void => {\r\n    setOpenAddItem(false)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container>\r\n        <div className=\"header\">\r\n          <PlaylistAddCheckIcon fontSize='large' sx={{marginRight: '.5rem', color: '#ffff'}} />\r\n          <h1>My Todo</h1>\r\n        </div>\r\n        <Grid container spacing={5} className='container'>\r\n        <DragDropContext  onDragEnd={result => onDragEnd(result, columns, setColumn)}>\r\n          {\r\n            Object.entries(columns).map(([id, column]) => {\r\n              return (\r\n                <Droppable key={id} droppableId={id}>\r\n                    {(provided, snapshot) => {\r\n                      return (\r\n                        <Grid item xs={12} md={4} className='container__gridItem'>\r\n                          <div \r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                            className='container__gridItem__todoColumnContainer'\r\n                          >\r\n                            <h2>{column.name}</h2>\r\n                            {\r\n                              column.name === 'To do' &&\r\n                              <button onClick={handleClick} style={{\r\n                                  position: 'absolute',\r\n                                  top: '1rem',\r\n                                  right: '1rem',\r\n                                  cursor: 'pointer',\r\n                                  background: 'transparent',\r\n                                  border: 'none'\r\n                              }}>\r\n                                <MoreVertIcon />\r\n                              </button>\r\n                            }\r\n                            {\r\n                              column.items.map((item, index) => {\r\n                                return (\r\n                                  <Draggable \r\n                                    key={item.id} \r\n                                    draggableId={item.id} \r\n                                    index={index}\r\n                                  >\r\n                                      {(provided, snapshot) => {\r\n                                        return (\r\n                                          <Paper \r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}  \r\n                                            onClick={() => openModalHandler(item, column.name, id)}                                          \r\n                                            sx={{\r\n                                              backgroundColor: snapshot.isDragging ? '#9d9f99' : '#ffff'\r\n                                            }}\r\n                                            className='container__gridItem__todoColumnContainer__paper'\r\n                                          > \r\n                                            <h2>{item.title}</h2>\r\n                                            <p>{item.date}</p>\r\n                                          </Paper>\r\n                                        )\r\n                                      }}\r\n                                  </Draggable>\r\n                                )\r\n                              })\r\n                            }\r\n                          </div>\r\n                        </Grid>\r\n                      )\r\n                    }}\r\n                </Droppable>\r\n              )\r\n            })  \r\n          }\r\n              <Menu\r\n                anchorEl={anchorEl}\r\n                open={openMenu}\r\n                onClose={handleClose}\r\n                TransitionComponent={Fade}\r\n                className='menu'\r\n                >\r\n                <MenuItem onClick={() => openAddModal()}>\r\n                  <AddIcon /> \r\n                  <p style={{fontFamily: 'Nunito Sans'}}>Add Todo</p>\r\n                </MenuItem>\r\n              </Menu>\r\n        </DragDropContext>\r\n      </Grid>\r\n    </Container>\r\n\r\n    {\r\n      openAddItem ?\r\n      <AddItemModal \r\n        columnType={columnType} \r\n        open={openAddItem} \r\n        onClose={closeAddModal}\r\n        columns={columns}\r\n        columnId={columnId}\r\n        setColumn={setColumn}\r\n        setOpen={setOpenAddItem}\r\n      />\r\n      :\r\n      <Modal \r\n        columnType={columnType} \r\n        item={item} \r\n        open={openDetail} \r\n        onClose={closeModalHandler}\r\n        columns={columns}\r\n        columnId={columnId}\r\n        setColumn={setColumn}\r\n        setOpen={setOpenDetail}\r\n      />\r\n    }\r\n  </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default App;","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\ndocument.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}